using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using UnityEngine;
using UnityEditor;

#if UNITY_2018_1_OR_NEWER
using UnityEditor.Build.Reporting;
#endif

namespace Cake.Unity3D
{
    public static class AutomatedBuild
    {
        /// <summary>
        /// Re-Run the last build command, invoked by UI
        /// </summary>
        [MenuItem("Cake3D/Build (Re-Run)")]
        public static void BuildReRun()
        {
            string[] args = ReadArgsReRun("Build");
            Build(args);
        }

        /// <summary>
        /// Main build method, invoked from command line
        /// </summary>
        public static void Build()
        {
            string[] args = Environment.GetCommandLineArgs();
            WriteArgsForReRun(args, "Build");
            Build(args);
        }

        /// <summary>
        /// Re-Run the last SetPlayerSettings command, invoked by UI
        /// </summary>
        [MenuItem("Cake3D/SetPlayerSettings (Re-Run)")]
        public static void SetPlayerSettingsReRun()
        {
            string[] args = ReadArgsReRun("SetPlayerSettings");
            SetPlayerSettings(args);
        }

        /// <summary>
        /// Setup the Player Settings by command line parameters, invoked from command line
        /// </summary>
        public static void SetPlayerSettings()
        {            
            string[] args = Environment.GetCommandLineArgs();
            WriteArgsForReRun(args, "SetPlayerSettings");
            SetPlayerSettings(args);
        }

        /// <summary>
        /// Write the command line arguments into EditorPrefs storrage for reuse with the Re-Run commands
        /// </summary>
        /// <param name="args">the command line arguments</param>
        /// <param name="key">key of the command</param>
        static void WriteArgsForReRun(string[] args, string key)
        {
            string json = JsonUtility.ToJson(args);
            EditorPrefs.SetString($"Cake3D.{key}", json);
        }

        /// <summary>
        /// Read back the command line arguments for a given command from the last invokation via command line
        /// </summary>
        /// <param name="key">key of the command</param>
        /// <returns>the command line arguments</returns>
        static string[] ReadArgsReRun(string key)
        {
            string json = EditorPrefs.GetString($"Cake3D.{key}");
            return JsonUtility.FromJson<string[]>(json);
        }

        /// <summary>
        /// Build a player with prameters parsed from the args
        /// </summary>
        /// <param name="args">command line arguments used to parameterize the build</param>
        public static void Build(string[] args)
        {
            Debug.Log("[Cake.Unity3D] Beginning automated build");

            var options = ParseCommandLineOptions(args);

            PlayerSettings.bundleVersion = ParseOption(options, "version", PlayerSettings.bundleVersion);

            var buildPlayerOptions = new BuildPlayerOptions
            {
                scenes = FindBuildScenes(options),
                locationPathName = ParseOption(options, "output-path", string.Empty),
                target = ParseOption(options, "platform", BuildTarget.StandaloneWindows64),
                options = ParseOption(options, "options", BuildOptions.None),
                assetBundleManifestPath = ParseOption(options, "asset-bundle-manifest-path", ""),
            };
            
            Debug.Log($"bundleVersion:{PlayerSettings.bundleVersion}");
            Debug.Log($"scenes:{string.Join(";",buildPlayerOptions.scenes)}");
            Debug.Log($"locationPathName:{buildPlayerOptions.locationPathName}");
            Debug.Log($"target:{buildPlayerOptions.target}");
            Debug.Log($"options:{buildPlayerOptions.options}");
            Debug.Log($"assetBundleManifestPath:{buildPlayerOptions.assetBundleManifestPath}");

            var report = BuildPipeline.BuildPlayer(buildPlayerOptions);

#if UNITY_2018_1_OR_NEWER
            if (report.summary.result != BuildResult.Succeeded)
            {
                Debug.LogError("[Cake.Unity3D] Build Failed");
            }
            Debug.Log(report);
#else
            if (!string.IsNullOrEmpty(report))
            {
                Debug.LogError("[Cake.Unity3D] Build Failed");
                Debug.LogError(report);
            }
#endif

            Debug.Log("[Cake.Unity3D] Automated build completed");
        }

        /// <summary>
        /// Update Visual Studio Project. Used by the Unity3DBuildDependencyContext
        /// </summary>
        [MenuItem("Cake3D/SyncVS")]
        public static void SyncVS()
        {
            Debug.Log("[Cake.Unity3D] Beginning SyncVS");
            InvokeStatic("UnityEditor.SyncVS", "SyncSolution");
            Debug.Log("[Cake.Unity3D] SyncVS completed");
        }

        /// <summary>
        /// Change the PlayerSettings based on args
        /// </summary>
        /// <param name="args">command line arguments used to configure PlayerSettings</param>
        public static void SetPlayerSettings(string[] args)
        {
            Debug.Log("[Cake.Unity3D] Set Player Settings");

            var options = ParseCommandLineOptions(args);

            foreach (KeyValuePair<string, string> setting in options)
            {
                SetSetting(setting.Key, setting.Value);
            }

            Debug.Log("[Cake.Unity3D] Set Player Settings completed");
        }

        /// <summary>
        /// Set a single setting of the PlayerSettings from string input
        /// </summary>
        /// <param name="key">String encoded Member Name of the PlayerSetting</param>
        /// <param name="value">String encoded value</param>
        private static void SetSetting(string key, string value)
        {
            if(!TrySetSpecialSetting(key, value))
            {
                SetSettingGeneric(key, value);
            }
        }

        /// <summary>
        /// Invoke a action for each availavle TargetGroup from the BuildTargetGroup enum
        /// </summary>
        /// <param name="action">the action invoked per TargetGroup</param>
        private static void ForEachTargetGroup(System.Action<BuildTargetGroup> action)
        {
            action(BuildTargetGroup.Android);
            action(BuildTargetGroup.Facebook);
            action(BuildTargetGroup.iOS);
            action(BuildTargetGroup.N3DS);
            action(BuildTargetGroup.PS4);
            action(BuildTargetGroup.PSP2);
            action(BuildTargetGroup.Standalone);
            action(BuildTargetGroup.Switch);
            action(BuildTargetGroup.tvOS);
            action(BuildTargetGroup.Unknown);
            action(BuildTargetGroup.WebGL);
            action(BuildTargetGroup.WSA);
            action(BuildTargetGroup.XboxOne);

#if !UNITY_2018_1_OR_NEWER
            action(BuildTargetGroup.WiiU);
#endif
#if !UNITY_2017_3_OR_NEWER
            action(BuildTargetGroup.SamsungTV);
            action(BuildTargetGroup.Tizen);
#endif
#if !UNITY_5_5_OR_NEWER
            action(BuildTargetGroup.XBOX360);
#endif
#if !UNITY_5_4_OR_NEWER
            action(BuildTargetGroup.BlackBerry);
            action(BuildTargetGroup.WebPlayer);
#endif
#if !UNITY_5_5_OR_NEWER
            action(BuildTargetGroup.PS3);
#endif
#if !UNITY_5_3_OR_NEWER
            action(BuildTargetGroup.PSM);
#endif
        }

        /// <summary>
        /// Parse the command line arguments into a key/value dictionary
        /// </summary>
        /// <param name="cmdLineArgs">the string arguments from the command line</param>
        /// <returns>key/value pairs of the arguments</returns>
        private static Dictionary<string, string> ParseCommandLineOptions(string[] cmdLineArgs)
        {  
            var options = new Dictionary<string, string>();

            // Custom arguments start with '--' and are in the format --key=value
            var argumentRegex = new Regex(@"--(?<key>.*?)=(?<value>.*)");
            foreach (var matchingArgument in cmdLineArgs.Select(x => argumentRegex.Match(x)).Where(x => x.Success))
            {
                var key = matchingArgument.Groups["key"].Value;
                var value = matchingArgument.Groups["value"].Value;

                if (options.ContainsKey(key))
                {
                    Debug.LogErrorFormat("[Cake.Unity3D] The command line argument '{0}' has been specified multiple times.", key);
                    continue;
                }

                options[key] = value;
                Debug.LogFormat("[Cake.Unity3D] Loaded option '{0}' with value '{1}'.", key, value);
            }

            return options;
        }

        /// <summary>
        /// Lookup a option in the options and return as target type. Return defaultValue if not pressent.
        /// </summary>
        /// <typeparam name="T">Type of the Value</typeparam>
        /// <param name="options">List of Options</param>
        /// <param name="option">Lookup Key</param>
        /// <param name="defaultValue">Return value in case the key is not pressent in options</param>
        /// <returns></returns>
        private static T ParseOption<T>(IDictionary<string, string> options, string option, T defaultValue)
        {
            string value;
            if (!options.TryGetValue(option, out value))
            {
                return defaultValue;
            }

            if (typeof(T).IsEnum)
            {
                return (T)Enum.Parse(typeof(T), value);
            }

            if (typeof(T) == typeof(string))
            {
                return (T)(object)value;
            }

            return (T)Convert.ChangeType(value, typeof(T));
        }

        /// <summary>
        /// Get a list of all scenes used by this build.
        /// If the scenes parameter is supplyed in options it returense the scnes from options.
        /// Otherwise it returns the scenes found by FindEnabledEditorScenes().
        /// </summary>
        /// <param name="options">List of Options used to build the player</param>
        /// <returns>List of map names used in this build</returns>
        private static string[] FindBuildScenes(Dictionary<string,string> options)
        {
            string scenes = ParseOption(options, "scenes", "");
            if(string.IsNullOrEmpty(scenes))
            {
                return FindEnabledEditorScenes();
            }
            else
            {
                return scenes.Split(';');
            }
        }

        /// <summary>
        /// Get a list of all scenes enabled in the editor build settings.
        /// </summary>
        /// <returns>All enabled scenes from the Unity editor build settings.</returns>
        private static string[] FindEnabledEditorScenes()
        {
            return EditorBuildSettings.scenes
                        .Where(x => x.enabled)
                        .Select(x => x.path)
                        .ToArray();
        }

        /// <summary>
        /// Utility Function to call static functions of protected Unity Types
        /// </summary>
        /// <param name="typeName">FullName of the Target Type</param>
        /// <param name="methodName">Name of the Target Method</param>
        /// <param name="args">parameter used for the Invokation</param>
        private static void InvokeStatic(string typeName, string methodName, params object[] args)
        {
            foreach(var asm in System.AppDomain.CurrentDomain.GetAssemblies())
            {
                foreach(var type in asm.GetTypes())
                {
                    if(type.FullName == typeName)
                    {
                        foreach(var method in type.GetMethods())
                        {
                            if(method.IsStatic && method.Name == methodName)
                            {
                                method.Invoke(null, args);
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Helper function to only invoke the action if a value is present and of right type
        /// </summary>
        /// <typeparam name="T">Target type of the Value</typeparam>
        /// <param name="action">Action to invoke</param>
        /// <param name="input">Input to parse</param>
        private static void IfHasValue<T>(System.Action<T> action, string input)
        {
            T value;
            if (TryGetValue<T>(input, out value))
            {
                action(value);
            }
        }

        /// <summary>
        /// Helper function to only invoke the action if a all values are present and of right type
        /// </summary>
        /// <typeparam name="T">Target type of the Value</typeparam>
        /// <param name="action">Action to invoke</param>
        /// <param name="input1">First input to parse</param>
        /// <param name="input2">Second input to parse</param>
        private static void IfHasValue<T1, T2>(System.Action<T1, T2> action, string input1, string input2)
        {
            T1 value1;
            if (!TryGetValue<T1>(input1, out value1))
            {
                return;
            }
            T2 value2;
            if (!TryGetValue<T2>(input2, out value2))
            {
                return;
            }
            action(value1, value2);
        }

        /// <summary>
        /// Parse the option from a PlayerSettings key. 
        /// The key is cut to not include the option if a option is present.
        /// </summary>
        /// <param name="key">the key of the PlayerSetting</param>
        /// <param name="option">the parsed option of the Key</param>
        /// <returns>true if a option was pressent in the key</returns>
        private static bool TryGetSpecialOption(ref string key, out string option)
        {
            int index = key.IndexOf(':');
            if (index >= 0)
            {
                string prefix = key.Substring(0, index);
                string surfix = key.Substring(index + 1, key.Length - index - 1);
                key = prefix;
                option = surfix;
                return true;
            }
            option = "";
            return false;
        }

        /// <summary>
        /// Optional handling method for Special PlayerSettings Member that have complex structures.
        /// </summary>
        /// <param name="key">PlayerSettings Member Name</param>
        /// <param name="value">value of the setting</param>
        /// <returns>true if this setting was handled by this function</returns>
        private static bool TrySetSpecialSetting(string key, string value)
        {
            string option;
            TryGetSpecialOption(ref key, out option);

            switch (key)
            {
                case "applicationIdentifier":
                    ForEachTargetGroup((group) => { PlayerSettings.SetApplicationIdentifier(group, value); });
                    Debug.Log($"[Cake.Unity3D]\t{key} => {value}");
                    return true;
                case "stackTraceLogType":
                    IfHasValue<LogType, StackTraceLogType>((logType, stackTraceType) => {
                        PlayerSettings.SetStackTraceLogType(logType, stackTraceType);
                        Debug.Log($"[Cake.Unity3D]\t{key}({logType}) => {value}");
                    }, option, value);
                    return true;
                case "aspectRatio":
                    IfHasValue<AspectRatio, bool>((aspectRatio, enable) => {
                        PlayerSettings.SetAspectRatio(aspectRatio, enable);
                        Debug.Log($"[Cake.Unity3D]\t{key}({aspectRatio}) => {value}");
                    }, option, value);
                    return true;
                case "graphicsAPIs":
                    IfHasValue<BuildTarget, string[]>((buildTarget, graphicsAPIs) => {
                        List<string> setApiList = new List<string>();
                        // Filter out the DoNotUseDefault and UseDefault enums
                        foreach (string graphicsAPI in graphicsAPIs)
                        {
                            if (graphicsAPI == "DoNotUseDefault")
                            {
                                PlayerSettings.SetUseDefaultGraphicsAPIs(buildTarget, false);
                                Debug.Log($"[Cake.Unity3D]\t{key}({buildTarget}, UseDefault) => false");
                            }
                            else if (graphicsAPI == "UseDefault")
                            {
                                PlayerSettings.SetUseDefaultGraphicsAPIs(buildTarget, true);
                                Debug.Log($"[Cake.Unity3D]\t{key}({buildTarget}, UseDefault) => true");
                            }
                            else
                            {
                                setApiList.Add(graphicsAPI);
                            }
                        }
                        // Join the rest and apply
                        string setApis = string.Join(",", setApiList);
                        IfHasValue<UnityEngine.Rendering.GraphicsDeviceType[]>((deviceTypes) => {
                            PlayerSettings.SetGraphicsAPIs(buildTarget, deviceTypes);
                            Debug.Log($"[Cake.Unity3D]\t{key}({buildTarget}) => {setApis}");
                        }, setApis);
                    }, option, value);
                    return true;
                case "il2CppCompilerConfiguration":
                    IfHasValue<BuildTargetGroup, Il2CppCompilerConfiguration>((targetGroup, configuration) => {
                        PlayerSettings.SetIl2CppCompilerConfiguration(targetGroup, configuration);
                        Debug.Log($"[Cake.Unity3D]\t{key}({targetGroup}) => {value}");
                    }, option, value);
                    return true;
                case "incrementalIl2CppBuild":
                    IfHasValue<BuildTargetGroup, bool>((targetGroup, configuration) => {
                        PlayerSettings.SetIncrementalIl2CppBuild(targetGroup, configuration);
                        Debug.Log($"[Cake.Unity3D]\t{key}({targetGroup}) => {value}");
                    }, option, value);
                    return true;
                case "scriptingBackend":
                    IfHasValue<BuildTargetGroup, ScriptingImplementation>((targetGroup, configuration) => {
                        PlayerSettings.SetScriptingBackend(targetGroup, configuration);
                        Debug.Log($"[Cake.Unity3D]\t{key}({targetGroup}) => {value}");
                    }, option, value);
                    return true;
                case "scriptingDefineSymbolsForGroup":
                    IfHasValue<BuildTargetGroup, string>((targetGroup, configuration) => {
                        PlayerSettings.SetScriptingDefineSymbolsForGroup(targetGroup, configuration);
                        Debug.Log($"[Cake.Unity3D]\t{key}({targetGroup}) => {value}");
                    }, option, value);
                    return true;
                case "preloadedAssets":
                    IfHasValue<UnityEngine.Object[]>((objects) => {
                        PlayerSettings.SetPreloadedAssets(objects);
                        Debug.Log($"[Cake.Unity3D]\t{key} => {value}");
                    }, value);
                    return true;
                case "iconsForTargetGroup":
                    IfHasValue<BuildTargetGroup, Texture2D[]>((targetGroup, icons) => {
                        PlayerSettings.SetIconsForTargetGroup(targetGroup, icons);
                        Debug.Log($"[Cake.Unity3D]\t{key}({targetGroup}) => {value}");
                    }, option, value);
                    return true;
                case "iOS.iPadLaunchScreenType":
                    IfHasValue<iOSLaunchScreenType>((type) => {
                        PlayerSettings.iOS.SetiPadLaunchScreenType(type);
                        Debug.Log($"[Cake.Unity3D]\t{key} => {value}");
                    }, value);
                    return true;
                case "iOS.iPhoneLaunchScreenType":
                    IfHasValue<iOSLaunchScreenType>((type) => {
                        PlayerSettings.iOS.SetiPhoneLaunchScreenType(type);
                        Debug.Log($"[Cake.Unity3D]\t{key} => {value}");
                    }, value);
                    return true;
                case "iOS.launchScreenImage":
                    IfHasValue<iOSLaunchScreenImageType, Texture2D>((type, texture) => {
                        PlayerSettings.iOS.SetLaunchScreenImage(texture, type);
                        Debug.Log($"[Cake.Unity3D]\t{key}({type}) => {value}");
                    }, option, value);
                    return true;
            }
            return false;
        }

        /// <summary>
        /// Generic function to set any Member of the PlayerSettings
        /// </summary>
        /// <param name="key">PlayerSettings Member Name</param>
        /// <param name="value">value of the setting</param>
        private static void SetSettingGeneric(string key, string value)
        {
            string property;
            Type t = GetType(key, out property);
            if (t != null)
            {
                var info = t.GetProperty(property);

                if (info != null && info.CanWrite)
                {
                    object objValue;
                    if (TryGetValue(info.PropertyType, value, out objValue))
                    {
                        info.SetValue(null, objValue);
                        Debug.Log($"[Cake.Unity3D]\t{t.Name}.{info.Name} => {value}");
                    }
                    else
                    {
                        Debug.LogError($"[Cake.Unity3D] Unable to get value for PlayerSettings.{property} tryed to parse '{value}'");
                    }
                }
                else
                {
                    Debug.LogError($"[Cake.Unity3D] Unable to Find PlayerSettings.Property Set '{property}'");
                }
            }
            else
            {
                Debug.LogError($"[Cake.Unity3D] Unkown Type '{key}'");
            }
        }

        private static readonly Type PlayerSettingsType = typeof(PlayerSettings);
        private static readonly Type PlayerSettingsAndroidType = typeof(PlayerSettings.Android);
        private static readonly Type PlayerSettingsFacebookType = typeof(PlayerSettings.Facebook);
        private static readonly Type PlayerSettingsiOSType = typeof(PlayerSettings.iOS);
        private static readonly Type PlayerSettingsMacOSType = typeof(PlayerSettings.macOS);
        private static readonly Type PlayerSettingsN3DSType = typeof(PlayerSettings.N3DS);
        private static readonly Type PlayerSettingsPS4Type = typeof(PlayerSettings.PS4);
        private static readonly Type PlayerSettingsPSVitaType = typeof(PlayerSettings.PSVita);
        private static readonly Type PlayerSettingsSplashScreenType = typeof(PlayerSettings.SplashScreen);
        private static readonly Type PlayerSettingsSwitchType = typeof(PlayerSettings.Switch);
        private static readonly Type PlayerSettingsTvOSType = typeof(PlayerSettings.tvOS);
        private static readonly Type PlayerSettingsVRCardboardType = typeof(PlayerSettings.VRCardboard);
        private static readonly Type PlayerSettingsVRDaydreamType = typeof(PlayerSettings.VRDaydream);
        private static readonly Type PlayerSettingsVROculusType = typeof(PlayerSettings.VROculus);
        private static readonly Type PlayerSettingsWebGLType = typeof(PlayerSettings.WebGL);
        private static readonly Type PlayerSettingsWSAType = typeof(PlayerSettings.WSA);
        private static readonly Type PlayerSettingsXboxOneType = typeof(PlayerSettings.XboxOne);
        /// <summary>
        /// Get the target Type of the PlayerSettings.
        /// As PlayerSettings have some subtypes this function will return subtypes of PlayerSettings.
        /// This function will also return the target Member name of the returned Type.
        /// </summary>
        /// <param name="key">PlayerSettings Member Name including Subtype</param>
        /// <param name="property">Target Member Name of the PlayerSetting (Relative to Type)</param>
        /// <returns>Target type of the PlayerSetting</returns>
        private static Type GetType(string typeInfo, out string property)
        {
            int index = typeInfo.LastIndexOf('.');
            if (index >= 0)
            {
                string subType = typeInfo.Substring(0, index);
                property = typeInfo.Substring(index + 1, typeInfo.Length - index - 1);
                switch (subType.ToLower())
                {
                    case "android":
                        return PlayerSettingsAndroidType;
                    case "facebook":
                        return PlayerSettingsFacebookType;
                    case "ios":
                        return PlayerSettingsiOSType;
                    case "macos":
                        return PlayerSettingsMacOSType;
                    case "n3ds":
                        return PlayerSettingsN3DSType;
                    case "ps4":
                        return PlayerSettingsPS4Type;
                    case "psvita":
                        return PlayerSettingsPSVitaType;
                    case "splashscreen":
                        return PlayerSettingsSplashScreenType;
                    case "switch":
                        return PlayerSettingsSwitchType;
                    case "tvos":
                        return PlayerSettingsTvOSType;
                    case "vrcardboard":
                        return PlayerSettingsVRCardboardType;
                    case "vrdaydream":
                        return PlayerSettingsVRDaydreamType;
                    case "vroculus":
                        return PlayerSettingsVROculusType;
                    case "webgl":
                        return PlayerSettingsWebGLType;
                    case "wsa":
                        return PlayerSettingsWSAType;
                    case "xboxone":
                        return PlayerSettingsXboxOneType;
                }
            }
            property = typeInfo;
            return PlayerSettingsType;
        }

        /// <summary>
        /// Helper function to get a target value of target type given the input.
        /// This function usualy converts from input string to output type.
        /// For assets type this will try to locate the assed based on the string input.
        /// </summary>
        /// <typeparam name="T">target Type of the value</typeparam>
        /// <param name="input">value encoded as string</param>
        /// <param name="value">retrurn value in target type</param>
        /// <returns>returns true if convertion or looup was successful</returns>
        private static bool TryGetValue<T>(string input, out T value)
        {
            object objValue;
            if (TryGetValue(typeof(T), input, out objValue))
            {
                value = (T)objValue;
                return true;
            }
            value = default(T);
            return false;
        }

        /// <summary>
        /// Helper function to get a target value of target type given the input.
        /// This function usualy converts from input string to output type.
        /// For assets type this will try to locate the assed based on the string input.
        /// </summary>
        /// <param name="type">target Type of the value</param>
        /// <param name="input">value encoded as string</param>
        /// <param name="value">retrurn value in target type</param>
        /// <returns>returns true if convertion or looup was successful</returns>
        private static bool TryGetValue(Type type, string input, out object value)
        {
            if (type == typeof(string))
            {
                value = input;
                return true;
            }
            else if (type == typeof(string[]))
            {
                value = input.Split(',');
                return true;
            }
            else if (type == typeof(bool))
            {
                bool parseValue;
                if (bool.TryParse(input, out parseValue))
                {
                    value = parseValue;
                    return true;
                }
            }
            else if (type == typeof(int))
            {
                int parseValue;
                if (int.TryParse(input, out parseValue))
                {
                    value = parseValue;
                    return true;
                }
            }
            else if (type == typeof(byte))
            {
                byte parseValue;
                if (byte.TryParse(input, out parseValue))
                {
                    value = parseValue;
                    return true;
                }
            }
            else if (type == typeof(short))
            {
                short parseValue;
                if (short.TryParse(input, out parseValue))
                {
                    value = parseValue;
                    return true;
                }
            }
            else if (type == typeof(ushort))
            {
                ushort parseValue;
                if (ushort.TryParse(input, out parseValue))
                {
                    value = parseValue;
                    return true;
                }
            }
            else if (type == typeof(uint))
            {
                uint parseValue;
                if (uint.TryParse(input, out parseValue))
                {
                    value = parseValue;
                    return true;
                }
            }
            else if (type == typeof(long))
            {
                long parseValue;
                if (long.TryParse(input, out parseValue))
                {
                    value = parseValue;
                    return true;
                }
            }
            else if (type == typeof(ulong))
            {
                ulong parseValue;
                if (ulong.TryParse(input, out parseValue))
                {
                    value = parseValue;
                    return true;
                }
            }
            else if (type == typeof(float))
            {
                float parseValue;
                if (float.TryParse(input, out parseValue))
                {
                    value = parseValue;
                    return true;
                }
            }
            else if (type == typeof(double))
            {
                double parseValue;
                if (double.TryParse(input, out parseValue))
                {
                    value = parseValue;
                    return true;
                }
            }
            else if (type.IsArray)
            {
                Type elemType = type.GetElementType();
                string[] strings = input.Split(',');
                Array values = (Array)Activator.CreateInstance(type, new object[] { strings.Length });
                for (int i = 0; i < strings.Length; i++)
                {
                    object elemValue;
                    if (!TryGetValue(elemType, strings[i], out elemValue))
                    {
                        value = null;
                        return false;
                    }
                    values.SetValue(elemValue, i);
                }
                value = values;
                return true;
            }
            else if (type.IsEnum)
            {
                try
                {
                    value = Enum.Parse(type, input);
                    return true;
                }
                catch (Exception)
                {

                }
            }
            else if (type == typeof(Color))
            {
                Color color;
                if (ColorUtility.TryParseHtmlString(input, out color))
                {
                    value = color;
                    return true;
                }
            }
            else if (type == typeof(Texture2D))
            {
                object obj = AssetDatabase.LoadAssetAtPath(input, typeof(Texture2D));
                if (obj != null && obj is Texture2D)
                {
                    value = obj;
                    return true;
                }
            }
            else if (type == typeof(Sprite))
            {
                object obj = AssetDatabase.LoadAssetAtPath(input, typeof(Sprite));
                if (obj != null && obj is Sprite)
                {
                    value = obj;
                    return true;
                }
            }
            else if (type == typeof(PlayerSettings.SplashScreenLogo))
            {
                string logoString = input;
                Sprite logo;
                string durationString;
                float duration;
                if (TryGetSpecialOption(ref logoString, out durationString) &&
                    TryGetValue<Sprite>(logoString, out logo) &&
                    float.TryParse(durationString, out duration))
                {
                    value = new PlayerSettings.SplashScreenLogo()
                    {
                        logo = logo,
                        duration = duration,
                    };
                    return true;
                }
            }
            else if (type == typeof(UnityEngine.Object))
            {
                object obj = AssetDatabase.LoadAssetAtPath(input, typeof(UnityEngine.Object));
                if (obj != null)
                {
                    value = obj;
                    return true;
                }
            }
            value = null;
            return false;
        }
    }
}
