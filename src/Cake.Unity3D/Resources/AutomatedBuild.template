using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using UnityEngine;
using UnityEditor;

#if UNITY_2018_1_OR_NEWER
using UnityEditor.Build.Reporting;
#endif

namespace Cake.Unity3D
{
    public static class AutomatedBuild
    {
        /// <summary>
        /// Main build method, this should be executed by a build system.
        /// </summary>
        public static void Build()
        {
            Debug.Log("[Cake.Unity3D] Beginning automated build");

            var options = ParseCommandLineOptions();

            PlayerSettings.bundleVersion = ParseOption(options, "version", PlayerSettings.bundleVersion);

            var buildPlayerOptions = new BuildPlayerOptions
            {
                scenes = FindBuildScenes(options),
                locationPathName = ParseOption(options, "output-path", string.Empty),
                target = ParseOption(options, "platform", BuildTarget.StandaloneWindows64),
                options = ParseOption(options, "options", BuildOptions.None),
                assetBundleManifestPath = ParseOption(options, "asset-bundle-manifest-path", ""),
            };

            var report = BuildPipeline.BuildPlayer(buildPlayerOptions);

#if UNITY_2018_1_OR_NEWER
            if (report.summary.result != BuildResult.Succeeded)
            {
                Debug.LogError("[Cake.Unity3D] Build Failed");
            }
            Debug.Log(report);
#else
            if (!string.IsNullOrEmpty(report))
            {
                Debug.LogError("[Cake.Unity3D] Build Failed");
                Debug.LogError(report);
            }
#endif

            Debug.Log("[Cake.Unity3D] Automated build completed");
        }

        /// <summary>
        /// Update Visual Studio Project. Used by the Unity3DBuildDependencyContext
        /// </summary>
        public static void SyncVS()
        {
            Debug.Log("[Cake.Unity3D] Beginning SyncVS");
            InvokeStatic("UnityEditor.SyncVS", "SyncSolution");
            Debug.Log("[Cake.Unity3D] SyncVS completed");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private static Dictionary<string, string> ParseCommandLineOptions()
        {
            var cmdLineArgs = Environment.GetCommandLineArgs();

            var options = new Dictionary<string, string>();

            // Custom arguments start with '--' and are in the format --key=value
            var argumentRegex = new Regex(@"--(?<key>.*?)=(?<value>.*)");
            foreach (var matchingArgument in cmdLineArgs.Select(x => argumentRegex.Match(x)).Where(x => x.Success))
            {
                var key = matchingArgument.Groups["key"].Value;
                var value = matchingArgument.Groups["value"].Value;

                if (options.ContainsKey(key))
                {
                    Debug.LogErrorFormat("[Cake.Unity3D] The command line argument '{0}' has been specified multiple times.", key);
                    continue;
                }

                options[key] = value;
                Debug.LogFormat("[Cake.Unity3D] Loaded option '{0}' with value '{1}'.", key, value);
            }

            return options;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="options"></param>
        /// <param name="option"></param>
        /// <param name="defaultValue"></param>
        /// <returns></returns>
        private static T ParseOption<T>(IDictionary<string, string> options, string option, T defaultValue)
        {
            string value;
            if (!options.TryGetValue(option, out value))
            {
                return defaultValue;
            }

            if (typeof(T).IsEnum)
            {
                return (T)Enum.Parse(typeof(T), value);
            }

            if (typeof(T) == typeof(string))
            {
                return (T)(object)value;
            }

            return (T)Convert.ChangeType(value, typeof(T));
        }

        /// <summary>
        /// Get a list of all scenes used by this build.
        /// If the scenes parameter is supplyed in options it returense the scnes from options.
        /// Otherwise it returns the scenes found by FindEnabledEditorScenes().
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        private static string[] FindBuildScenes(Dictionary<string,string> options)
        {
            string scenes = ParseOption(options, "scenes", "");
            if(string.IsNullOrEmpty(scenes))
            {
                return FindEnabledEditorScenes();
            }
            else
            {
                return scenes.Split(';');
            }
        }

        /// <summary>
        /// Get a list of all scenes enabled in the editor build settings.
        /// </summary>
        /// <returns>All enabled scenes from the Unity editor build settings.</returns>
        private static string[] FindEnabledEditorScenes()
        {
            return EditorBuildSettings.scenes
                        .Where(x => x.enabled)
                        .Select(x => x.path)
                        .ToArray();
        }

        /// <summary>
        /// Utility Function to call static functions of protected Unity Types
        /// </summary>
        /// <param name="typeName">FullName of the Target Type</param>
        /// <param name="methodName">Name of the Target Method</param>
        /// <param name="args">parameter used for the Invokation</param>
        private static void InvokeStatic(string typeName, string methodName, params object[] args)
        {
            foreach(var asm in System.AppDomain.CurrentDomain.GetAssemblies())
            {
                foreach(var type in asm.GetTypes())
                {
                    if(type.FullName == typeName)
                    {
                        foreach(var method in type.GetMethods())
                        {
                            if(method.IsStatic && method.Name == methodName)
                            {
                                method.Invoke(null, args);
                            }
                        }
                    }
                }
            }
        }
    }
}
